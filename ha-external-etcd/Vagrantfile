Vagrant.configure(2) do |config|

  k8sNodeCount    = 3
  etcdNodeCount   = 3
  osImage         = "debian/bullseye64"
  ipPrefix        = "172.16.0"
  hostnamePrefix  = "172-16-0"

  (1..k8sNodeCount).each do |i|
    vmIP = "#{ipPrefix}.10#{i}"
    vmHostname = "#{hostnamePrefix}-10#{i}"
    config.vm.define vmHostname do |knode|
      knode.vm.box = osImage
      knode.vm.hostname = vmHostname
      knode.vm.network "private_network", ip: vmIP
      # Prefer libvirt provider if virtualbox too is installed
      knode.vm.provider :libvirt do |v|
        v.memory = 2048
        v.nested = true
        v.cpus = 2
      end
      knode.vm.provider "virtualbox" do |v|
        v.name = vmHostname
        v.memory = 2048
        v.cpus = 2
      end
      knode.vm.provision "file", source: vmHostname, destination: "~/"
      knode.vm.provision "file", source: "./ca.pem", destination: "~/ca.pem"
      knode.vm.provision "file", source: "kubeadm-init-config.yaml", destination: "~/kubeadm-init-config.yaml"
      knode.vm.provision "shell", path: "prepare-node.sh", env: {"NODEIP" => vmIP, "NODENAME" => vmHostname}
    end
  end

  (1..etcdNodeCount).each do |i|
    vmIP = "#{ipPrefix}.20#{i}"
    vmHostname = "#{hostnamePrefix}-20#{i}"
    config.vm.define vmHostname do |etcd|
      etcd.vm.box = osImage
      etcd.vm.hostname = vmHostname
      etcd.vm.network "private_network", ip: vmIP
      etcd.vm.provider :libvirt do |v|
        v.memory = 512
        v.nested = true
        v.cpus = 1
      end
      etcd.vm.provision "file", source: vmHostname, destination: "~/"
      etcd.vm.provision "file", source: "./ca.pem", destination: "~/ca.pem"
      etcd.vm.provision "file", source: "./etcd.service", destination: "~/etcd.service"
      etcd.vm.provision "shell", path: "init-etcd.sh", env: {"NODEIP" => vmIP, "NODENAME" => vmHostname}
    end
  end

  config.vm.define  "#{hostnamePrefix}-100" do |haproxy|
    haproxy.vm.box = osImage
    haproxy.vm.hostname = "#{hostnamePrefix}-100"
    haproxy.vm.network "private_network", ip: "#{ipPrefix}.100"
    haproxy.vm.provider :libvirt do |v|
      v.memory = 512
      v.nested = true
      v.cpus = 1
    end
    haproxy.vm.provision "file", source: "haproxy.cfg", destination: "~/haproxy.cfg"
    haproxy.vm.provision "shell", inline: "apt update && apt install -y haproxy && cp /home/vagrant/haproxy.cfg /etc/haproxy/haproxy.cfg && systemctl restart haproxy"
  end

end
